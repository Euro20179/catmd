#!/bin/sh

#sources the config file
configFile=~/.config/catmd/conf.sh
[ -e "$configFile" ] && . "$configFile"

#essentially like $MANPAGER the text will be piped into here
pager="${pager-}"
#the command to get the text from the file, eg: cat, tac
    #tac will likely break this program
readCmd="${readCmd-cat}"

printhelp () {
    printf "Usage: \033[1mcatmd [-n] [file]\033[0m\n"
    printf "by default file is equal to README.md\n"
}

while getopts "h" opt; do
    case "$opt" in
	h)
	    printhelp;
	    exit ;;
    esac
done
shift $((OPTIND-1))

#gets the contents of the file/stdin
file="$1"
if [ -n "$file" ]; then
    data="$(eval "$readCmd" $file)"
else
    data="$(eval "$readCmd" 'README.md')"
fi

isFunction () {
    if type $1 > /dev/null 2>&1; then
	return 0
    else
	return 1
    fi
}

#each function below, is a function that gets called when replacing that attribute
    #each function must print the final result of what will replace the original text

#for --- or
isFunction hr || hr () {
    cols=$(tput cols)
    i=0
    while [ $i -lt $cols ]; do
	_hr="$_hr-"
	i=$((i + 1))
    done
    printf "%s" "\033[9m$_hr\033[0m"
}

#for * [ ] text
isFunction emptyCheckBox || emptyCheckBox () {
#\1 is the whitespace before the *
#\2 is the text after the checkbox
    printf "%s" '\1 \033[31m\[ \]\033[39m \2'
}

#for * [x] text
isFunction checkedCheckBox || checkedCheckBox () {
#\1 is the whitespace before the *
#\2 is the text after the checkbox
    printf "%s" '\1 \033[32m\[x\]\033[39m \2'
}

#for 
#```lang 
#it colors everything after this and before the end of the block
isFunction blockCodeStart || blockCodeStart () {
#\1 is the lang
    printf "%s" '\033[32m\1\033[9;39m\n------------------------------------\033[0m\033[2m'
}

#for the end of the blocked code
isFunction blockCodeEnd || blockCodeEnd () {
    printf "%s" '\033[0m\033[9m------------------------------------\033[0m'
}

#for `code`
isFunction inlineCode || inlineCode () {
#\1 is the text inside of ``
    printf "%s" '\033[2m\1\033[0m'
}

#for bulleted list
isFunction unorderedList || unorderedList () {
#\1 is the whitespace before the bullet
#\2 is the bullet used (*/-/+)
#\3 is the text
    printf "%s" '\1* \3'
}

#for **bolded** text
isFunction bold || bold () {
#\1 is the type used (**/__)
#\2 is the text being bolded
    printf "%s" '\033[1m\2\033[39m'
}

#for *italic* text
isFunction italic || italic () {
#\1 is the type used (*/_)
#\2 is the texed being italisized
    printf "%s" '\033[3m\2\033[0m'
}

#for #{1,6} headers
isFunction headers || headers () {
#\1 the # used at the start
#\2 the text
    printf "%s" '\033[1;32m\1\033[29;39m \033[4m\033[1m\2\033[0m'
}

#for [text](link)
isFunction markdownLinks || markdownLinks () {
#\1 the text inside of []
#\2 the text inside of ()
    printf "%s" '\033[1m\1\033[0m (\033[34m\2\033[29;39m)'
}

#for > text
isFunction blockQuotes || blockQuotes () {
#\1 the whitespace before >
#\2 the text
    printf "%s" '\1\|\033[2;3m\2\033[0m'
}

#used for just plain links (https://www.link.com)
isFunction links || links () {
#\1 the link
    printf "%s" '\033[34m\1\033[39m'
}

#used for ~~strikethrough~~
isFunction strikethrough || strikethrough () {
#\1 is the text
    printf "%s" '\033[9m\1\033[0m'
}

#checklists
data="$(printf "%s" "$data" | perl -pe 's|(^\s*)\* (?<!\\)\[ \] (.*)|'"$(emptyCheckBox)"'|gi')"
data="$(printf "%s" "$data" | perl -pe 's|(^\s*)\* (?<!\\)\[x\] (.*)|'"$(checkedCheckBox)"'|gi')"
#code
data="$(printf "%s" "$data" | perl -pe 's|(?<!\\)```(.+)|'"$(blockCodeStart)"'|g')"
data="$(printf "%s" "$data" | perl -pe 's|(?<!\\)```|'"$(blockCodeEnd)"'|g')"
data="$(printf "%s" "$data" | perl -pe 's|(?<!\\)`(.*?)`|'"$(inlineCode)"'|g')"
#bullet points
data="$(printf "%s" "$data" | perl -pe 's|(^\s*)(?<!\\)(\*\|\+\|-) (.*)|'"$(unorderedList)"'|g')"
#bold
data="$(printf "%s" "$data" | perl -pe 's|(?<!\\)(\*\|_){2}(.+?)\1{2}|'"$(bold)"'|g')"
#italic
data="$(printf "%s" "$data" | perl -pe 's|(?<!\\)(\*\|_)([^*\n]+)\1|'"$(italic)"'|g')"
#headers
data="$(printf "%s" "$data" | perl -pe 's|(?<!\\)^(#+) +(.*)|'"$(headers)"'|g')"
#links
data="$(printf "%s" "$data" | perl -pe 's|(?<!\\)\[(.+?)\]\((.+?)\)|'"$(markdownLinks)"'|g')"
#block quotes
data="$(printf "%s" "$data" | perl -pe 's|(?<!\\)(^\s*)>(.*)|'"$(blockQuotes)"'|g')"
#hr
data="$(printf "%s" "$data" | perl -pe 's|(?<!\\)^-{3,}$|'"$(hr)"'|g')"
#links
data="$(printf "%s" "$data" | perl -pe 's|([A-z]+://[^'\''" ]+)|'"$(links)"'|g')"
#strikethrough
data="$(printf "%s" "$data" | perl -pe 's|~~(.*?)~~|'"$(strikethrough)"'|g')"

if [ -n "$pager" ]; then
    printf "%s\n" "$data" | $pager
else
    printf "%s\n" "$data"
fi
